---
- name: Warn if in check mode
  become: false
  ansible.builtin.debug:
    # If we try to become a user that does not exist Ansible will throw an error.
    msg: "WARNING: Certain tasks from this role will fail in check mode if the container user does not already exist."
  changed_when: ansible_check_mode
  when: ansible_check_mode
  delegate_to: localhost
  run_once: true

- name: Run fact gathering tasks
  ansible.builtin.include_tasks: gather_facts.yml

- name: "Check if {{ container_init_conf.name }} service already exists"
  become: true
  become_user: "{{ container_init_conf.owner }}"
  ansible.builtin.stat:
    path: "{{ user_facts.home }}/.config/systemd/user/{{ container_init_conf.prefix | default(container_init_default_prefix) }}-{{ container_init_conf.name }}.service"
  register: unit_file

- name: "Stop {{ container_init_conf.name }} service"
  become: true
  become_user: "{{ container_init_conf.owner }}"
  ansible.builtin.systemd:
    name: "{{ container_init_conf.prefix | default(container_init_default_prefix) }}-{{ container_init_conf.name }}"
    state: stopped
    scope: user
  when: unit_file.stat.exists

- name: "Pull latest {{ container_init_conf.image }} container image"
  become: true
  become_user: "{{ container_init_conf.owner }}"
  containers.podman.podman_image:
    name: "{{ container_init_conf.repo }}/{{ container_init_conf.image }}"
    tag: "{{ container_init_conf.tag }}"
    pull: true
    state: present
    validate_certs: true

- name: Check status of mountpoints
  ansible.builtin.stat:
    path: "{{ item | split(':') | first }}"
  loop: "{{ container_init_conf.volumes | default(container_init_default_volumes, true) }}"
  loop_control:
    label: "{{ item | split(':') | first }}"
  register: mountpoints

- name: Warn if mountpoint is missing
  ansible.builtin.debug:
    msg:
      - "WARNING: {{ item.item | split(':') | first }} is missing."
      - "Playbook may fail unexpectedly."
  when: item.stat.exists is false
  changed_when: item.stat.exists is false
  loop: "{{ mountpoints.results }}"
  loop_control:
    label: "{{ item.item | split(':') | first }}"

- name: "Create {{ container_init_conf.name }} container"
  become: true
  become_user: "{{ container_init_conf.owner }}"
  containers.podman.podman_container:
    name: "{{ container_init_conf.name }}"
    hostname: "{{ container_init_conf.name }}"
    image: "{{ container_init_conf.repo }}/{{ container_init_conf.image }}:{{ container_init_conf.tag }}"
    command: "{{ container_init_conf.command if container_init_conf.command is defined else omit }}"
    user: "{{ container_init_conf.uid | default(0, true) }}:{{ container_init_conf.gid | default(0, true) }}"
    state: created
    # If recreate is set to no will only recreate the container on a change.
    #  However, certain arguments break this (e.g. cmd_args).
    recreate: true
    label: "{{ container_init_conf.labels | default(container_init_default_labels, true) }}"
    network: "{{ container_init_conf.networks | default(omit, true) }}"
    publish: "{{ container_init_conf.ports | default(container_init_default_ports, true) }}"
    env: "{{ container_init_conf.env | default(container_init_default_env, true) }}"
    volume: "{{ container_init_conf.volumes | default(container_init_default_volumes, true) }}"
    generate_systemd:
      path: "{{ user_facts.home }}/.config/systemd/user"
      container_prefix: "{{ container_init_conf.prefix | default(container_init_default_prefix, true) }}"
      new: "{{ container_init_conf.systemd_new | default(true, true) }}"
    log_driver: "{{ container_init_conf.log_driver | default('journald', true) }}"

- name: Reload user scope systemd daemon
  become: true
  become_user: "{{ container_init_conf.owner }}"
  ansible.builtin.systemd:
    daemon-reload: true
    scope: user

- name: "Ensure {{ container_init_conf.name }} is enabled"
  become: true
  become_user: "{{ container_init_conf.owner }}"
  ansible.builtin.systemd:
    name: "{{ container_init_conf.prefix | default(container_init_default_prefix) }}-{{ container_init_conf.name }}"
    enabled: true
    scope: user

# If the role is called more than once the restart handler will
#  run using the latest value of `container_init_conf`. To solve this
#  we enqueue every value of `container_init_conf` and loop though them
#  in the handler.
- name: "Queue {{ container_init_conf.name }} for restart"
  ansible.builtin.set_fact:
    container_restart_queue: "{{
      container_restart_queue + [container_init_conf]
        if container_restart_queue is defined
        else [container_init_conf]
    }}"
  changed_when: true # Necessary to trigger notify
  notify: (Re)start containers
